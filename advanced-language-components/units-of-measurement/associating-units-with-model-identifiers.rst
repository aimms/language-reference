.. _sec:units.ident:

Associating Units with Model Identifiers
========================================

.. _unit-LR:

.. rubric:: The :any:`Unit` attribute

To associate units with scalar or multi-dimensional identifiers in your
model, you can specify a unit definition for such identifiers through
the :any:`Unit` attribute. The :any:`Unit` attribute is only supported for the
following identifier types:

-  parameters,

-  variables,

-  constraints,

-  arcs,

-  nodes,

-  function and procedure arguments, and

-  internal and external functions.

.. rubric:: Visibility of the :any:`Unit` attribute

Within the AIMMS **Model Explorer**, the :any:`Unit` attribute is only
visible in the attribute forms of the identifier types listed above if
your model already contains the declarations of one or more quantities.
If you only want to use the :any:`Unit` attribute to specify a scale factor
for an identifier (see below), you can make the :any:`Unit` attribute
visible in all attribute forms by adding a *unitless* quantity to your
model (i.e. a quantity with base unit 1).

.. rubric:: :any:`Unit` attribute value

In its simplest form, the unit definition of a parameter, variable or
constraint is just a reference to a base or compound unit symbol. In
general, it can be a unit expression based on the same syntax as
described previously for specifying a derived unit expression in a
``Quantity`` declaration. The complete syntax of unit expressions is
discussed in :ref:`sec:units.expr`.

.. rubric:: Example

The declaration

.. code-block:: aimms

	Variable VelocityOfItem
	    IndexDomain  : i;
	    Unit         : km/h;
	}

introduces a variable ``VelocityOfItem(i)`` with a corresponding unit
``km/h``. This declaration could also have been written as

.. code-block:: aimms

	Variable VelocityOfItem {
	    IndexDomain  : i;
	    Unit         : 1000*m/h;
	}

which contains an explicit scale factor of 1000, instead of using the
derived unit symbol ``km``.

.. rubric:: Units also for scaling

When you do not use unit symbols, you can still use the :any:`Unit`
attribute to indicate the appropriate scale factor to be used for an
identifier. These scale factors, whether or not in the presence of unit
symbols, will be used by AIMMS to scale the corresponding data during
various computations, as explained in :ref:`sec:units.scaling`.

.. rubric:: Use of units

By specifying units for some or all the identifiers in your model, AIMMS
will perform the following unit-related tasks for you:

-  automatic checking of the statements in your model for unit
   consistency (see :ref:`sec:units.analysis`),

-  automatic scaling of identifiers in assignments, ``DISPLAY`` and
   ``READ``/``WRITE`` statements (see :ref:`sec:units.scaling`), and

-  automatic conversion of arguments (and result value) of external
   procedures and functions (see :ref:`sec:units.scaling`), and

-  automatic scaling of the variables and constraints in a mathematical
   program (see :ref:`sec:units.scaling.mp`).

.. rubric:: The ``.Unit`` suffix

For all identifier types for which you can specify a :any:`Unit` attribute,
there is also an associated ``.Unit`` suffix. The value of the ``.Unit``
suffix is a unit expression that equals the unit specified within the
:any:`Unit` attribute of the identifier at hand.

.. rubric:: Use of the ``.Unit`` suffix

The ``.Unit`` suffix is most commonly used in the following situations:

-  when generating reports by means of the ``PUT`` and ``DISPLAY``
   statements (see :ref:`sec:report.put` and :ref:`sec:report.display`,
   respectively),

-  when displaying units in strings generated by the ``%u`` conversion
   specifier of the :any:`FormatString` function (see
   :ref:`sec:set-expr.string.format`), and

-  when performing sensitivity analysis of mathematical programs in the
   presence of variables and constraints which have a non-empty :any:`Unit`
   attribute (see :ref:`sec:units.scaling.mp`).

.. rubric:: Indices not always required

If you want to reference the ``.Unit`` suffix of a multidimensional
identifier, it is not always necessary to use the corresponding indices
of the identifier in its ``.Unit`` suffix reference. The use of indices
is only necessary if the :any:`Unit` attribute actively depends on the
indices, for instance, because it

-  contains a multidimensional scale factor, or

-  refers to a multidimensional unit parameter (see also
   :ref:`sec:units.unit-par`).

In all other cases, a reference to just the identifier name is
sufficient.

.. rubric:: Example

Consider the declaration of the variable ``VelocityOfItem(i)`` above.
Its ``UNIT`` attribute is the constant unit ``km/h``, whence it can be
obtain through the (scalar) reference

.. code-block:: aimms

	VelocityOfItem.Unit

.. rubric:: Unit-valued parameters are permitted

When the :any:`Unit` attribute of an identifier contains references to
*unit-valued* parameters (see :ref:`sec:units.unit-par`), such
references will be evaluated, within the context of the ``.Unit``
suffix, to their corresponding unit expressions. Thus, the ``.Unit``
suffix will always result in a unit expression containing only unit
symbols declared in one or more ``Quantity`` declarations.